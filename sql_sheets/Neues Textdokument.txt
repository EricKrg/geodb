create extension postgis # erweiterung um postgis- kann jetzt auch gis ;)

# shp2pgsql geospatial>databases>shp2pgsql
SRID: 31468 (Gauß-Krüger Zone 4) # muss man mauell einstellen
option spatilain dex ist latinß nicht UTF8!!

view connenction details
user
database: thueringen

befehle:
-- Abfragen:
-- select * from bahn --alles, was in bahn ist
-- select * from kgr14 where kreis_name like '%Altenburg%' --1
-- select status from bahn --2
-- select f_table_name from geometry_columns where type ilike '%Point%' --3
-- select distinct gew_name1 from gewaesser --4
-- select * from gem14 where gemeindena ilike'N%' and area >10e6 --5
-- select name, st_x(geom),st_y(geom) from bahnhof where name ilike '%Jena%'
-- select sum(st_length(geom)) from bahn where status ilike '%Schmal%' --st_lenth(geom)-gibt Länge aus
-- select sum(st_length(geom)) from autobahn --sum(st_length(geom) --8
-- select count(*) from gewaesser where gew_name1 ilike '%Saale%' --9
-- select gew_name1,sum(st_length(geom)) from gewaesser group by gew_name1 order by 2 desc limit 5 --11 , ordersortiert und limit gibt teil wieder
-- select gew_name1,sum(st_length(geom)),count(gew_name1) from gewaesser group by gew_name1 --12
-- select * from bahn group by status -- noch nicht richtig
-- create table kbl1995 (id integer, kreis_name character(30),anzahl integer, flaeche100m2 integer,preis numeric);
-- create table kbl2008 (id integer, kreis_name character(30),anzahl integer, flaeche100m2 integer,preis numeric);
-- create table kbl2014 (id integer, kreis_name character(30),anzahl integer, flaeche100m2 integer,preis numeric)
-- copy kbl1995 from '/media/user/data/Data/1995export.txt' encoding 'Latin9';
-- copy kbl2008 from '/media/user/data/Data/2008export.txt' encoding 'Latin9';
-- copy kbl2014 from '/media/user/data/Data/2014export.txt' encoding 'Latin9'


-- Verknüpfungen:
-- select kgr14.kreis_name,area, preis from kgr14 inner join kbl1995 on kgr14.tlsid=kbl1995.id --1
/* select kgr14.kreis_name,area, kbl1995.preis as p95, kbl2008.preis as p14,kbl2014.preis as p14
from kgr14 inner join kbl1995 on kgr14.tlsid=kbl1995.id 
inner join kbl2008 on kgr14.tlsid=kbl2008.id
inner join kbl2014 on kgr14.tlsid=kbl2014.id */

-- Unterabfragen
-- select id,gew_name1, st_length(geom) from gewaesser order by st_length desc-- nicht richtig
/*create view max_flusssegment as
select gid,gew_name1, st_length(geom),geom from gewaesser 
where st_length(geom) = (select max(st_length(geom)) from gewaesser)*/

-- select *,st_length(geom) as length from gewaesser where st_length(geom) =
-- (select max(st_length(geom)) from gewaesser) --no14

/*
select gew_name1, count(*) from gewaesser group by gew_name1
having count(*) >=ALL
(select count(*) from gewaesser group by gew_name1) -- no 15*/

Geoabfragen:- verwalten con gis daten in Datenbanken

-- geometrische Funktionen
/*select count(*) from autobahn cross join gewaesser 
where st_intersects(autobahn.geom, gewaesser.geom)
and gewaesser.gew_name1 ilike '%Saale%'*/-- 
# so findet man due anzahl der schnittpunkt

create view schittpunkt_autobahn as
select autobahn.gid,st_intersection(autobahn.geom, gewaesser.geom) as geom 
from autobahn cross join gewaesser 
where st_intersects(autobahn.geom, gewaesser.geom)
and gewaesser.gew_name1 ilike '%Saale%'
# darstellung des schnittpunktes

select count(*) from gem14 cross join kgr14
where st_contains(kgr14.geom, gem14.geom)
and kgr14.kreis_name ilike '%Wartburg%'
# wieviel Gemeinden hat Wartburg??

/*create view schmalspur as
select distinct bahnhof.* 
from bahnhof cross join bahn
where st_intersects(bahn.geom,st_buffer(bahnhof.geom, 50))
and bahn.status ilike '%Schmal%'*/

hainich
create view Hainich as
select * from nationalpark cross join kgr14
where st_intersects(nationalpark.geom, kgr14.geom)
/*select kreis_name,st_area(st_intersection(nationalpark.geom, kgr14.geom)) from nationalpark cross join kgr14
where st_intersects(nationalpark.geom, kgr14.geom)*/

Mittelpunkt:
create view Mittelpunkt as
select 1 as gid,st_centroid(st_union(kgr14.geom)) as geom -- durch 1 as gid habe ich eine Spalte hinzugefügt
from kgr14

name der Gemeinde indem der mittelpunkt liegt:
select * from gem14 cross join
mittelpunkt where st_intersects(gem14.geom, mittelpunkt.geom)

Viewer: sind on the fly
man kann die Views auch stabilisieren, auch so, dass z.B alle 24h aktualisiert

Jena und Wasserschutzgebiete:
select kreis_name,
sum(st_area(st_intersection(wsg_sz3.geom, kgr14.geom))) as absolut,
sum(st_area(st_intersection(wsg_sz3.geom, kgr14.geom)))/avg(kgr14.area) * 100 as prozentual
from wsg_sz3 
cross join kgr14 
where st_intersects(wsg_sz3.geom, kgr14.geom)
and kgr14.kreis_name ilike 'Jena%'
group by kreis_name

für alle Kreise
select kreis_name,
sum(st_area(st_intersection(wsg_sz3.geom, kgr14.geom))) as absolut,
sum(st_area(st_intersection(wsg_sz3.geom, kgr14.geom)))/avg(kgr14.area) * 100 as prozentual
from wsg_sz3 
cross join kgr14 
where st_intersects(wsg_sz3.geom, kgr14.geom)
and kgr14.kreis_name is not null
group by kreis_name
order by 3 desc


Einladen einer csv Datei:
-- create table station(id char(10),rechtswert double precision,
-- hochwert double precision,hoehe double precision,art char(15),
-- name char(25))

-- copy station from '/media/user/data/Data/Luftmess.csv'
-- alter table station add column idint int4
-- CREATE SEQUENCE stationcounter START 1
-- update station set idint= nextval('stationcounter')
-- ALTER TABLE station ADD PRIMARY KEY (idint);
-- Select AddGeometryColumn('public','station','geom',31468,'POINT',3);
-- Select 'SRID=31464;POINT('||rechtswert||' '||hochwert||' '||hoehe||')' from station
-- Update station set geom= GeomFromEWKT ('SRID=31468;POINT('||rechtswert||' '||hochwert||' '||hoehe||')')

create view St_Jena as
select name, st_intersection(station.geom, gem14.geom) as geom
from station 
cross join gem14
where st_intersects(station.geom, gem14.geom)
and station.name ilike '%Jena%'

pgsql2shp auch über Kommandozeile